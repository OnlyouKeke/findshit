/**
 * ÂéïÊâÄÂç°ÁâáÁªÑ‰ª∂
 * ÊòæÁ§∫Âçï‰∏™ÂéïÊâÄÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
 */

import pasteboard from '@ohos.pasteboard';
import promptAction from '@ohos.promptAction';
import { ToiletPoi } from '../map/MapService';

// ÈÄöËøáÂØπË±°ÂõûË∞É‰º†ÈÄíÂØºËà™Âä®‰ΩúÔºåÈÅøÂÖçÁõ¥Êé•‰º†ÂáΩÊï∞ÂØºËá¥ÁöÑÁºñËØë/ËøêË°åÈôêÂà∂
export interface NavigateHandler {
  run(): void;
}

// ‰∏∫ ArkTS V1 ÊòæÂºèÊèê‰æõ‰∏Ä‰∏™Á±ªÂÆûÁé∞ÔºåÊñπ‰æøÂú®Ë∞ÉÁî®ÊñπÈÅøÂÖçÂØπË±°Â≠óÈù¢Èáè
export class NavigateHandlerImpl implements NavigateHandler {
  private fn: () => void;
  constructor(fn: () => void) {
    this.fn = fn;
  }
  run(): void {
    this.fn();
  }
}

@Component
export struct ToiletCard {
  @Prop toilet: ToiletPoi;
  @Prop travelMode: string;
  @Prop onNavigate: NavigateHandler | null = null;

  // Ê†πÊçÆË∑ùÁ¶ªËé∑ÂèñÈ¢úËâ≤
  private getDistanceColor(): string {
    if (this.toilet.distance <= 200) return '#00C851'; // ÁªøËâ≤ - ÂæàËøë
    if (this.toilet.distance <= 500) return '#FF8800'; // Ê©ôËâ≤ - ‰∏≠Á≠â
    return '#FF4444'; // Á∫¢Ëâ≤ - ËæÉËøú
  }

  // Ê†πÊçÆË∑ùÁ¶ªËé∑ÂèñÊ≠•Ë°åÊó∂Èó¥‰º∞ÁÆó
  private getWalkingTime(): string {
    const walkingSpeed = 80; // Á±≥/ÂàÜÈíü
    const cyclingSpeed = 200; // Á±≥/ÂàÜÈíü
    
    const speed = this.travelMode === 'walking' ? walkingSpeed : cyclingSpeed;
    const minutes = Math.ceil(this.toilet.distance / speed);
    
    return `Á∫¶${minutes}ÂàÜÈíü`;
  }

  // Ëé∑ÂèñË∑ùÁ¶ªÊòæÁ§∫ÊñáÊú¨
  private getDistanceText(): string {
    if (this.toilet.distance < 1000) {
      return `${this.toilet.distance}m`;
    } else {
      return `${(this.toilet.distance / 1000).toFixed(1)}km`;
    }
  }

  private buildShareText(): string {
    const name = this.toilet.name || 'ÈôÑËøëÂÖ¨Âéï';
    const distance = this.getDistanceText();
    const address = this.toilet.address ? `ÔºåÂú∞ÂùÄÔºö${this.toilet.address}` : '';
    const { longitude, latitude } = this.toilet.location;
    const lon = Number.isFinite(longitude) ? longitude.toFixed(6) : `${longitude}`;
    const lat = Number.isFinite(latitude) ? latitude.toFixed(6) : `${latitude}`;
    const markerName = encodeURIComponent(name);
    const markerAddress = this.toilet.address ? encodeURIComponent(this.toilet.address) : '';
    const mapUrl = `https://uri.amap.com/marker?position=${lon},${lat}&name=${markerName}${markerAddress ? `&address=${markerAddress}` : ''}&callnative=0`;
    return `„Äå${name}„ÄçË∑ùÁ¶ªÂ§ßÁ∫¶${distance}${address}„ÄÇ\nÂú∞ÂõæÈìæÊé•Ôºö${mapUrl}\nÔºàÂ∑≤Â§çÂà∂ÔºåÁ≤òË¥¥Âà∞ÂæÆ‰ø°Âç≥ÂèØÂàÜ‰∫´Ôºâ`;
  }

  private async copyShareLink(): Promise<void> {
    const shareText = this.buildShareText();
    try {
      const systemPasteboard = pasteboard.getSystemPasteboard();
      const data = pasteboard.createData(pasteboard.PasteboardDataType.PASTEBOARD_DATA_PLAIN_TEXT, shareText);
      await systemPasteboard.setPasteboardData(data);
      promptAction.showToast({ message: 'Â∑≤Â§çÂà∂ÈìæÊé•ÔºåÂø´ÂéªÂæÆ‰ø°ÂàÜ‰∫´Âêß' });
    } catch (error) {
      console.error('Â§çÂà∂ÂàÜ‰∫´ÈìæÊé•Â§±Ë¥•', JSON.stringify(error));
      promptAction.showToast({ message: 'Â§çÂà∂Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï' });
    }
  }

  build() {
    Row() {
      // Â∑¶‰æßÂõæÊ†áÂíåË∑ùÁ¶ªÊåáÁ§∫Âô®
      Column({ space: 4 }) {
        Text('üöΩ')
          .fontSize(28)
        
        // Ë∑ùÁ¶ªÂúÜÁÇπÊåáÁ§∫Âô®
        Circle({ width: 8, height: 8 })
          .fill(this.getDistanceColor())
      }
      .width(60)
      .height(70)
      .backgroundColor($r('app.color.control_background'))
      .borderRadius(12)
      .justifyContent(FlexAlign.Center)
      .alignItems(HorizontalAlign.Center)
      
      // ‰∏≠Èó¥‰ø°ÊÅØÂå∫Âüü
      Column({ space: 6 }) {
        // ÂÖ¨ÂéïÂêçÁß∞
        Text(this.toilet.name)
          .fontSize(16)
          .fontWeight(FontWeight.Medium)
          .fontColor($r('app.color.text_primary'))
          .maxLines(1)
          .textOverflow({ overflow: TextOverflow.Ellipsis })
        
        // Âú∞ÂùÄ‰ø°ÊÅØÔºàÂÖúÂ∫ï‰∏∫Á©∫Â≠óÁ¨¶‰∏≤ÔºåÈÅøÂÖçÊú™ÂÆö‰πâÂØºËá¥ÂºÇÂ∏∏Ôºâ
        Text(this.toilet.address || '')
          .fontSize(13)
          .fontColor($r('app.color.text_secondary'))
          .maxLines(2)
          .textOverflow({ overflow: TextOverflow.Ellipsis })
          .lineHeight(18)
        
        // Ë∑ùÁ¶ªÂíåÊó∂Èó¥‰ø°ÊÅØ
        Row({ space: 12 }) {
          // Ë∑ùÁ¶ªÊ†áÁ≠æ
          Row({ space: 4 }) {
            Text('üìç')
              .fontSize(12)
            Text(this.getDistanceText())
              .fontSize(13)
              .fontColor(this.getDistanceColor())
              .fontWeight(FontWeight.Medium)
          }
          
          // Êó∂Èó¥‰º∞ÁÆó
          Row({ space: 4 }) {
            Text(this.travelMode === 'walking' ? 'üö∂' : 'üö¥')
              .fontSize(12)
            Text(this.getWalkingTime())
              .fontSize(13)
              .fontColor($r('app.color.accent_color'))
          }
        }
        .alignItems(VerticalAlign.Center)
      }
      .layoutWeight(1)
      .alignItems(HorizontalAlign.Start)
      .margin({ left: 16, right: 12 })
      .justifyContent(FlexAlign.SpaceBetween)

      // Âè≥‰æßÊìç‰ΩúÊåâÈíÆ
      Column({ space: 8 }) {
        Button() {
          Row({ space: 4 }) {
            Text('üß≠')
              .fontSize(14)
            Text('ÂØºËà™')
              .fontSize(13)
              .fontWeight(FontWeight.Medium)
          }
        }
        .width(70)
        .height(36)
        .backgroundColor($r('app.color.accent_color'))
        .borderRadius(18)
        .onClick(() => {
          // Ëß¶ÂèëÁà∂ÁªÑ‰ª∂ÁöÑÂØºËà™‰∫ã‰ª∂ÔºàÈò≤Ê≠¢Êú™‰º†ÂÖ•Êó∂ÂºÇÂ∏∏Ôºâ
          if (this.onNavigate) {
            this.onNavigate.run();
          }
        })

        Button() {
          Row({ space: 4 }) {
            Text('üü¢')
              .fontSize(14)
            Text('ÂæÆ‰ø°')
              .fontSize(13)
              .fontWeight(FontWeight.Medium)
          }
        }
        .width(70)
        .height(36)
        .backgroundColor('#07C160')
        .borderRadius(18)
        .onClick(() => {
          this.copyShareLink();
        })
      }
      .justifyContent(FlexAlign.Center)
    }
    .width('100%')
    .height(90)
    .padding({ left: 16, right: 16, top: 12, bottom: 12 })
    .backgroundColor($r('app.color.surface_card'))
    .borderRadius(16)
    .shadow({
      radius: 12,
      color: '#00000008',
      offsetX: 0,
      offsetY: 4
    })
    .border({
      width: 1,
      color: $r('app.color.control_button_border')
    })
    .margin({ bottom: 12 })
    .animation({
      duration: 200,
      curve: Curve.EaseOut
    })
  }
}

